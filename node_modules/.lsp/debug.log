Hello - from /home/sweetsinpackets/.vscode-server/extensions/jaredly.reason-vscode-1.7.6/bin.native.linux
Previous log location: /tmp/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///home/sweetsinpackets/pathway_finding_ver/find_path.ml","languageId":"ocaml","version":1,"text":"\ntype bool =\n| True\n| False\n\ntype nat =\n| O\n| S of nat\n\ntype 'a option =\n| Some of 'a\n| None\n\ntype ('a, 'b) prod =\n| Pair of 'a * 'b\n\n(** val fst : ('a1, 'a2) prod -> 'a1 **)\n\nlet fst = function\n| Pair (x, _) -> x\n\n(** val snd : ('a1, 'a2) prod -> 'a2 **)\n\nlet snd = function\n| Pair (_, y) -> y\n\ntype 'a list =\n| Nil\n| Cons of 'a * 'a list\n\n(** val length : 'a1 list -> nat **)\n\nlet rec length = function\n| Nil -> O\n| Cons (_, l') -> S (length l')\n\n(** val app : 'a1 list -> 'a1 list -> 'a1 list **)\n\nlet rec app l m =\n  match l with\n  | Nil -> m\n  | Cons (a, l1) -> Cons (a, (app l1 m))\n\n(** val eqb : bool -> bool -> bool **)\n\nlet eqb b1 b2 =\n  match b1 with\n  | True -> b2\n  | False -> (match b2 with\n              | True -> False\n              | False -> True)\n\nmodule Nat =\n struct\n  (** val eqb : nat -> nat -> bool **)\n\n  let rec eqb n m =\n    match n with\n    | O -> (match m with\n            | O -> True\n            | S _ -> False)\n    | S n' -> (match m with\n               | O -> False\n               | S m' -> eqb n' m')\n end\n\n(** val hd_error : 'a1 list -> 'a1 option **)\n\nlet hd_error = function\n| Nil -> None\n| Cons (x, _) -> Some x\n\n(** val tl : 'a1 list -> 'a1 list **)\n\nlet tl = function\n| Nil -> Nil\n| Cons (_, m) -> m\n\n(** val rev : 'a1 list -> 'a1 list **)\n\nlet rec rev = function\n| Nil -> Nil\n| Cons (x, l') -> app (rev l') (Cons (x, Nil))\n\n(** val flat_map : ('a1 -> 'a2 list) -> 'a1 list -> 'a2 list **)\n\nlet rec flat_map f = function\n| Nil -> Nil\n| Cons (x, t) -> app (f x) (flat_map f t)\n\n(** val filter : ('a1 -> bool) -> 'a1 list -> 'a1 list **)\n\nlet rec filter f = function\n| Nil -> Nil\n| Cons (x, l0) ->\n  (match f x with\n   | True -> Cons (x, (filter f l0))\n   | False -> filter f l0)\n\ntype ascii =\n| Ascii of bool * bool * bool * bool * bool * bool * bool * bool\n\n(** val eqb0 : ascii -> ascii -> bool **)\n\nlet eqb0 a b =\n  let Ascii (a0, a1, a2, a3, a4, a5, a6, a7) = a in\n  let Ascii (b0, b1, b2, b3, b4, b5, b6, b7) = b in\n  (match match match match match match match eqb a0 b0 with\n                                       | True -> eqb a1 b1\n                                       | False -> False with\n                                 | True -> eqb a2 b2\n                                 | False -> False with\n                           | True -> eqb a3 b3\n                           | False -> False with\n                     | True -> eqb a4 b4\n                     | False -> False with\n               | True -> eqb a5 b5\n               | False -> False with\n         | True -> eqb a6 b6\n         | False -> False with\n   | True -> eqb a7 b7\n   | False -> False)\n\ntype string =\n| EmptyString\n| String of ascii * string\n\n(** val eqb1 : string -> string -> bool **)\n\nlet rec eqb1 s1 s2 =\n  match s1 with\n  | EmptyString -> (match s2 with\n                    | EmptyString -> True\n                    | String (_, _) -> False)\n  | String (c1, s1') ->\n    (match s2 with\n     | EmptyString -> False\n     | String (c2, s2') ->\n       (match eqb0 c1 c2 with\n        | True -> eqb1 s1' s2'\n        | False -> False))\n\n(** val eqn : nat -> nat -> bool **)\n\nlet rec eqn m n =\n  match m with\n  | O -> (match n with\n          | O -> True\n          | S _ -> False)\n  | S m' -> (match n with\n             | O -> False\n             | S n' -> eqn m' n')\n\n(** val cat : 'a1 list -> 'a1 list -> 'a1 list **)\n\nlet rec cat s1 s2 =\n  match s1 with\n  | Nil -> s2\n  | Cons (x, s1') -> Cons (x, (cat s1' s2))\n\ntype vertex = nat\n  (* singleton inductive, whose constructor was index *)\n\ntype node_type = (vertex, vertex) prod\n\ntype edge_type = ((node_type, node_type) prod, string) prod\n\ntype graph_type = edge_type list\n\n(** val input : vertex **)\n\nlet input =\n  O\n\n(** val eqv : vertex -> vertex -> bool **)\n\nlet eqv =\n  Nat.eqb\n\n(** val next_edges : node_type -> edge_type -> bool **)\n\nlet next_edges current e =\n  match eqv (fst current) (fst (fst (fst e))) with\n  | True -> eqv (snd current) (snd (fst (fst e)))\n  | False -> False\n\n(** val find_edge : node_type -> graph_type -> edge_type list **)\n\nlet find_edge current d =\n  filter (next_edges current) d\n\ntype state_type =\n| State of edge_type list * string * string list * string list\n\n(** val s_1 : state_type -> edge_type list **)\n\nlet s_1 = function\n| State (cur_path, _, _, _) -> cur_path\n\n(** val s_2 : state_type -> string **)\n\nlet s_2 = function\n| State (_, atc_h, _, _) -> atc_h\n\n(** val s_3 : state_type -> string list **)\n\nlet s_3 = function\n| State (_, _, atc_t, _) -> atc_t\n\n(** val s_4 : state_type -> string list **)\n\nlet s_4 = function\n| State (_, _, _, atc_used) -> atc_used\n\n(** val if_on_next_taxiway : state_type -> edge_type -> bool **)\n\nlet if_on_next_taxiway cur_s e =\n  match hd_error (s_3 cur_s) with\n  | Some t -> eqb1 t (snd e)\n  | None -> False\n\n(** val if_on_current_taxiway : state_type -> edge_type -> bool **)\n\nlet if_on_current_taxiway cur_s e =\n  eqb1 (s_2 cur_s) (snd e)\n\n(** val if_reach_endpoint : state_type -> vertex -> bool **)\n\nlet if_reach_endpoint cur_s end_v =\n  match hd_error (s_1 cur_s) with\n  | Some e ->\n    (match eqv (fst (snd (fst e))) end_v with\n     | True -> eqn (length (s_3 cur_s)) O\n     | False -> False)\n  | None -> False\n\n(** val step_state_by_e : state_type -> edge_type -> state_type list **)\n\nlet step_state_by_e cur_s e =\n  match if_on_current_taxiway cur_s e with\n  | True ->\n    Cons ((State ((Cons (e, (s_1 cur_s))), (s_2 cur_s), (s_3 cur_s), (s_4 cur_s))),\n      Nil)\n  | False ->\n    (match if_on_next_taxiway cur_s e with\n     | True ->\n       Cons ((State ((Cons (e, (s_1 cur_s))), (snd e), (tl (s_3 cur_s)), (Cons\n         ((s_2 cur_s), (s_4 cur_s))))), Nil)\n     | False -> Nil)\n\n(** val step_states : state_type -> graph_type -> state_type list **)\n\nlet step_states cur_s d =\n  match hd_error (s_1 cur_s) with\n  | Some e -> flat_map (step_state_by_e cur_s) (find_edge (snd (fst e)) d)\n  | None -> Nil\n\n(** val find_path_aux :\n    vertex -> graph_type -> nat -> state_type -> edge_type list list **)\n\nlet rec find_path_aux end_v d round_bound cur_s =\n  match round_bound with\n  | O -> Nil\n  | S n ->\n    cat\n      (match if_reach_endpoint cur_s end_v with\n       | True -> Cons ((rev (s_1 cur_s)), Nil)\n       | False -> Nil) (flat_map (find_path_aux end_v d n) (step_states cur_s d))\n\n(** val find_path :\n    vertex -> vertex -> string list -> graph_type -> edge_type list list option **)\n\nlet find_path start_v end_v aTC d =\n  match aTC with\n  | Nil -> None\n  | Cons (t, rest) ->\n    Some\n      (find_path_aux end_v d (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S\n        (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S\n        (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S\n        (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S (S\n        (S (S (S (S (S (S (S\n        O))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n        (State ((Cons ((Pair ((Pair ((Pair (start_v, input)), (Pair (start_v,\n        input)))), t)), Nil)), t, rest, Nil)))\n"}}}
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///home/sweetsinpackets/pathway_finding_ver/find_path.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.105142593384ms
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "No root directory found"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/sweetsinpackets/pathway_finding_ver/find_path.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.108957290649ms
Sending response {"id": 2, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/sweetsinpackets/pathway_finding_ver/find_path.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.105142593384ms
Sending response {"id": 3, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","id":4,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///home/sweetsinpackets/pathway_finding_ver/find_path.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.0770092010498ms
Sending response {"id": 4, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: No root directory found", "command": ""}}]}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///home/sweetsinpackets/pathway_finding_ver/find_path.ml"}}}
Read message 
{"jsonrpc":"2.0","id":5,"method":"shutdown","params":null}
Sending response {"id": 5, "jsonrpc": "2.0", "result": null}
Read message 
{"jsonrpc":"2.0","method":"exit","params":null}
Got exit! Terminating loop
Finished
